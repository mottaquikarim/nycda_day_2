{"home":{"content":"# HTML5 Continued\n---\n\nWelcome to Lecture 2! Here's a brief class breakdown.\n\n#### Learning Objectives\n---\n\n1. Know the difference between plain HTML and HTML5\n2. Write some new types of tags, understand where they're used\n3. Understand where CSS is used and how to include it\n4. Learn about selectors, specificity and understand how to use it to your advantage when writing custom styles for a webpage.\n\n#### To Do Today\n---\n\n#### Part One\n\n* #### [Warmup](#warmup)\n* #### [Web Developer Tools](#web-developer-tools)\n* #### [Indenting and Validation](#indenting-and-validation)\n* #### [Relative vs Absolute Paths](#relative-vs-absolute-paths)\n* #### [Html5 Tags](#html5-tags)\n\n#### Part Two\n\n* #### [Intro To CSS](#intro-to-css)\n* #### [Practice](#practice)\n\n#### Additional Resources\n---\n\n#### Class Notes From Canvas\n\n* #### [HTML5 Tags](https://canvas.instructure.com/courses/1105667/files/47398838?module_item_id=11295545)\n* #### [CSS Basics](https://canvas.instructure.com/courses/1105667/files/47398831?module_item_id=11295550)\n\n#### Videos and other content\n\n* #### [Deploy to the Internet](https://www.youtube.com/watch?v=wfBOrn3IzLw)\n* #### [Indentation Formatter](http://www.freeformatter.com/html-formatter.html#ad-output)\n* #### [HTML5 Validator](https://validator.w3.org/#validate_by_input)\n\n#### TOOLS\n---\n\n**DRAG** each link to your Chrome Toolbar to see in action.\n\n* #### <a id=\"codeOut\" href=\"javascript:(function(){(function(){var v=&quot;3.1.1&quot;;function loadScript(src){return new Promise((resolve,reject)=>{let done=false;const script=document.createElement('script');script.onload=script.onreadystatechange=function(){const isReadyStateLoaded=(!this.readyState||this.readyState==&quot;loaded&quot;||this.readyState==&quot;complete&quot;);if(!done&amp;&amp;isReadyStateLoaded){done=true;resolve();}};script.onerror=function(){reject();};script.src=src;document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);});}if(window.jQuery===undefined||window.jQuery.fn.jquery<v){loadScript(&quot;http://ajax.googleapis.com/ajax/libs/jquery/&quot;+v+&quot;/jquery.min.js&quot;).then(()=>{initMyBookmarklet();});}else{initMyBookmarklet();}function get_doctype(){return '<!DOCTYPE '+document.doctype.name+(document.doctype.publicId?' PUBLIC &quot;'+document.doctype.publicId+'&quot;':'')+(document.doctype.systemId?' &quot;'+document.doctype.systemId+'&quot;':'')+'>';return doctype;}function initMyBookmarklet(){(window.myBookmarklet=function(){const htmlCode=get_doctype()+document.documentElement.outerHTML;alert('Sit tight, validing your code now!');$.post('http://nycda-wdi.webscript.io/validatehtml5',{data:htmlCode}).then((data)=>{let resp;try{resp=JSON.parse(data);}catch(e){alert('Something went wrong!');}alert('Done! Check your console.log for results');(resp.messages||[]).forEach((item)=>{console.log(`[${item.type.toUpperCase()}]:\\n${item.message}\\nAROUND LINE ${item.lastLine}(give or take a few)`)});})})();}})();})();\">HTMLValidator</a>\n\n* #### <a id=\"codeOut\" href=\"javascript:(function(){(function(){var v=&quot;3.1.1&quot;;function loadScript(src){return new Promise((resolve,reject)=>{let done=false;const script=document.createElement('script');script.onload=script.onreadystatechange=function(){const isReadyStateLoaded=(!this.readyState||this.readyState==&quot;loaded&quot;||this.readyState==&quot;complete&quot;);if(!done&amp;&amp;isReadyStateLoaded){done=true;resolve();}};script.onerror=function(){reject();};script.src=src;document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);});}if(window.jQuery===undefined||window.jQuery.fn.jquery<v){loadScript(&quot;http://ajax.googleapis.com/ajax/libs/jquery/&quot;+v+&quot;/jquery.min.js&quot;).then(()=>{initMyBookmarklet();});}else{initMyBookmarklet();}function get_doctype(){return '<!DOCTYPE '+document.doctype.name+(document.doctype.publicId?' PUBLIC &quot;'+document.doctype.publicId+'&quot;':'')+(document.doctype.systemId?' &quot;'+document.doctype.systemId+'&quot;':'')+'>';return doctype;}function initMyBookmarklet(){(window.myBookmarklet=function(){const htmlCode=get_doctype()+document.documentElement.outerHTML;const form=`<form id=&quot;form&quot; action=&quot;http://www.freeformatter.com/html-formatter.html&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;><textarea id=&quot;htmlString&quot; name=&quot;htmlString&quot;>${htmlCode}</textarea><input type=&quot;hidden&quot; name=&quot;indentation&quot; value=&quot;FOUR_SPACES&quot;><input type=&quot;hidden&quot; name=&quot;foceInNewWindow&quot; value=&quot;true&quot;></form>`;const $form=$(form);$form.attr('target','_blank');$form.trigger('submit');})();}})();})();\">HTMLFormatter</a>\n","idx":0},"title":{"content":"Day 2: HTML5 Continued","idx":1},"desc":{"content":"HTML5 Continued","idx":2},"warmup":{"content":"# Warmup\n---\n\nLet's begin with a quick review of what we did last Tuesday.\n\n#### Task 1: Create and Deploy\n---\n\nUsing the technique we learned on Tuesday, create a simple website from scratch and deploy it to the internet view GitHub Pages.\n\n**REQUIREMENTS**\n\n* Create a folder called **mySecondWebsite**. All your relevant code should go inside this folder.\n* It should have **one** html file only (**QUESTION**: what should that file be called...?)\n* Your HTML file can be simple, just a **\"Hello, Wrold\"** should suffice (use the **h1** tag).\n* Remember to use proper HTML formatting. What tags must you have in **all** HTML files? Include them.\n* Deploy your site to the internet with GitHub.\n\n**REMINDER**\n\n* Here is how you **[deploy a sample page](https://www.youtube.com/watch?v=wfBOrn3IzLw)** to the internet.\n\n\n#### Task 2: Simple Markup\n---\n\nCreate a valid HTML page and add the proper markup so that it appears **similar** to this:\n\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/master/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/master/nytimes_screenshot.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n**REQUIREMENTS**\n\n* Note that we require your version to look **similar**, not exactly the same. \n * In general, do not worry about getting the fonts, borders, spacings correct. We will learn about that eventually.\n * Focus specifically on getting the **tags** correct. For example, what tag would you need for the title of the article? How about for the content? Etc\n* Deploy your page to GitHub just like you did in Task 1.\n\n\n\n\n","idx":3},"web-developer-tools":{"content":"# Web Developer Tools\n---\n\nWeb developer tools are your best friend.\n\n#### How to Access\n\n* You can right click anywhere on Chrome and pick **Inspect** option.\n* In the top menu bar, you can choose **View** > **Developer** > **Developer Tools**\n\n#### The Options\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_elements.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n#### Elements\n\n * Elements are the HTML tags that your created, but visualized as the browser interprets them.\n * Note how the elements contain HTML tag information (on the left) but also CSS data (on the right).\n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_console.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n#### Console\n\n* The console contains output from javascript code this is being run by the site.\n* The console will display **log statements** (basically, small messages that the developer writes into his/her code while testing) and it will display **errors** (in red).\n* Console is supremely useful in debugging the code you write. \n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_sources.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n#### Sources\n\n* Sources contains all the javascript, css, and HTML files that are being loaded by the entire webpage.\n* This includes the actual code that you wrote but **also** includes libraries and services like **Google Analytics**, **iframes**, etc.\n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_network_list.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_network_item.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n#### Network\n\n* The network tab is super useful - it displays **every** **single** resource the webpage loads.\n* Resources include things like **html files**, **javascript files**, **CSS files**, **images**, **videos**, **fonts**, etc\n* You can also see how long each resource took and **when** the browser started to load that resource\n* Finally, you can click into each of the resource lines to view a more detailed account of the **http** request that was sent and the response the browser got back.\n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_application.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n<div></div>\n<a href=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/nytimes_screenshot.png?raw=true\" target=\"_blank\"><img src=\"https://github.com/mottaquikarim/nycda_day_2/blob/gh-pages/Console_application_resources.png?raw=true\" style=\"width: 100%; height: auto;\"></a>\n\n#### Application\n\n* The application tab shows you data relating to persistent storage and caching.\n* **Persistent storage** includes stuff like **cookies**, **local storage**, and **session storage**.\n* If can see exactly what information other sites are using to track your actions on a particular page (generally, most of these stored data items are not malicious, but very interesting to look at)\n* If you'd like you can also remove stored items from your session using this UI>\n* Furthermore, you can see what pages and resources the browser is caching (for faster reloads)\n* Finally, all resources that you saw in the **network** tab are reproduced here as just files that you can view or download.\n\n","idx":4},"indenting-and-validation":{"content":"# Indenting and Validation\n---\n\nIndenting and validation are quite important when writing complex HTML webpages\n\n#### Indentations\n\n* We want to always indent with 4 spaces or 2 spaces.\n* In **Sublime** you can go to **View** > **Indentation** > **Tab Width: 4** to set this up.\n* Also, consider **[this](http://www.freeformatter.com/html-formatter.html#ad-output)** resource which formats for you.\n\n#### Validation\n\n* We **always** want to have valid HTML syntax.\n* The trouble is sometimes you'll have invalid HTML but it won't **look** like it is invalid, not on modern browsers at least.\n* Valid HTML is your best bet that the page will look the same across all browsers and platforms.\n* You can validate your HTML code **[here](https://validator.w3.org/#validate_by_input)** (and you should!).\n\n**DRAG** link to your Chrome Toolbar to see in action.\n\n* **<a id=\"codeOut\" href=\"javascript:(function(){(function(){var v=&quot;3.1.1&quot;;function loadScript(src){return new Promise((resolve,reject)=>{let done=false;const script=document.createElement('script');script.onload=script.onreadystatechange=function(){const isReadyStateLoaded=(!this.readyState||this.readyState==&quot;loaded&quot;||this.readyState==&quot;complete&quot;);if(!done&amp;&amp;isReadyStateLoaded){done=true;resolve();}};script.onerror=function(){reject();};script.src=src;document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);});}if(window.jQuery===undefined||window.jQuery.fn.jquery<v){loadScript(&quot;http://ajax.googleapis.com/ajax/libs/jquery/&quot;+v+&quot;/jquery.min.js&quot;).then(()=>{initMyBookmarklet();});}else{initMyBookmarklet();}function get_doctype(){return '<!DOCTYPE '+document.doctype.name+(document.doctype.publicId?' PUBLIC &quot;'+document.doctype.publicId+'&quot;':'')+(document.doctype.systemId?' &quot;'+document.doctype.systemId+'&quot;':'')+'>';return doctype;}function initMyBookmarklet(){(window.myBookmarklet=function(){const htmlCode=get_doctype()+document.documentElement.outerHTML;alert('Sit tight, validing your code now!');$.post('http://nycda-wdi.webscript.io/validatehtml5',{data:htmlCode}).then((data)=>{let resp;try{resp=JSON.parse(data);}catch(e){alert('Something went wrong!');}alert('Done! Check your console.log for results');(resp.messages||[]).forEach((item)=>{console.log(`[${item.type.toUpperCase()}]:\\n${item.message}\\nAROUND LINE ${item.lastLine}(give or take a few)`)});})})();}})();})();\">HTMLValidator</a>**\n\n","idx":5},"relative-vs-absolute-paths":{"content":"# Relative vs Absolute Paths\n---\n\nAbsolute/Relative URLs (or as they are sometimes called, **paths**).\n\n**Absolute URL**\n\nA URL that contains the **full path**. For example, **[https://validator.w3.org/nu/#textarea](https://validator.w3.org/nu/#textarea)** is an example of an absolute URL. \n\nContains both the **hostname** and the **full path** to file.\n\n**Relative URL**\n\nA URL that contains only a fragment of the full address. For example, **[/nu/textarea](/nu/textarea)**. **NOTE**: this won't actually work! However, the people in **https://validator.w3.org** would be able to use this correctly **because relative URLs use the hostname of the page they are on**.\n\n**When to use each type**\n\nIn general, if you are linking to an image or some other resource that lives on the internet, use **absolute paths**.\n\nWhen you are linking to something like **CSS stylesheets** or **javascript files** or **images that live on your servere** you should **definitely** use relative paths.\n\n#### Task 1\n---\n**[Consider this repo](https://github.com/FEWDMaterials/RelativePathsReview)**.\n\n(You can download that repo by clicking on the  big green button on the right hand side and hitting **download**)\n\nYou are given several \"websites\". However they are set up in strange configurations! \n\n**For Each Folder**\n\n1. **WITHOUT** rearranging the files, link the proper css folders in the **`HEAD`** section\n2. If you do it right, hovering over the page in the browser will cause it to change colors\n\n","idx":6},"html5-tags":{"content":"# HTML5 Tags\n---\n\n**Learning objective**: Understand how semantic HTML tags are used to markup a webpage.\n\n#### Background\n---\n\nHTML5 introduces a plethora of new tags. These tags are mainly used to dictate structure and meaning to the **information** that is presented on our website.\n\n**First**, we will discuss some key vocabulary terms and how they fit around the context of some common HTML webpages on the internet. \n\n**Then**, you will attempt to incorporate this knowledge yourself on some of the pages that you have built.\n\n\n\n#### Properly marking up your page\n---\nDon't worry about what the `id` attributes mean for now.\n\n![site structure](http://i.stack.imgur.com/L4qMt.png)\n\n#### Sections VS Articles\n---\nUse **sections** when you are outlining **chapters in a book**. \n\n**EXAMPLE**: A dessert cookbook could have chapters on **cake** recipes vs **pie** recipes.\n\nUse **articles** when you are defining say **poems** in a volume.\n\n**EXAMPLE**: In our dessert cookbook, **each recipe** in the **cake** section would be an **article**.\n\nYou can nest **articles** into **sections** and **sections** into **articles**.\n\n**EXAMPLE**\n\nArticles can go inside section tags\n```html\n<section>\n    <article>\n      <!-- first blog post -->\n    </article>\n    \n    <!-- .... more articles here ... -->\n</section>\n```\n\nSections can also go inside article tags\n```html\n<article>\n  <section>\n     <!-- introduction -->\n  </section>\n\n  <section>\n     <!-- content -->\n  </section>\n\n  <section>\n     <!-- summary, etc -->\n  </section>\n</article>\n```\n\n**THIS STUFF IS PARTLY SUBJECTIVE; THERE REALLY IS NO ONE RIGHT ANSWER**. As long as we are consistent and don't violate the laws of HTML (ie: we don't put a **p** tag inside a **a** tag, or something like that). \n\n#### Headers, Footers, Nav, Main\n---\n\n* Use headers/foorters/navs as **often as you'd like** within each section/article/aside\n* Each sectioning element (section/article/aside) can have it's own `h1` tag (some validators say this is not recommended but this is still technically allowed)\n* I usually put `nav` tags inside the `header` or `footer` pages\n* **MAIN** can only be used once per page. Typically, it is used to define what the main content block of the page is. Don't have to use it though. \n* Essentially, **the blue in the previous image could be wrapped in a main tag**\n\n\n#### Semantic HTML5 Tags\n---\n\nHere are some of the main tags that are supported.\n\n**SECTION**: Represents a generic document or application section.\n\n**HEADER**: Represents a group of introductory or navigational aids..\n\n**FOOTER**: Represents a footer for a section and can contain information about the author, copyright information, et cetera.\n\n**NAV**: Represents a section of the document intended for navigation.\n\n**MAIN**: Defines the main content of a document.\n\n**ARTICLE**: Represents an independent piece of content of a document, such as a blog entry or newspaper article\n\n**ASIDE**: Represents a piece of content that is only slightly related to the rest of the page.\n\n#### More info on sections vs articles\n---\n\n**SECTION**: Used to either group different articles into different purposes or subjects, or to define the different sections of a single article.\n\n**ARTICLE**: `<article>` is related to `<section>`, but is distinctly different. Whereas `<section>` is for grouping distinct sections of content or functionality, `<article>` is for containing related individual standalone pieces of content, such as individual blog posts, videos, images or news items. \n\n\n\n\n","idx":7},"intro-to-css":{"content":"# Intro To CSS\n---\n\n**Learning objective**: understand that CSS is the **search engine** of HTML markup.\n\n#### Background\n---\nLet's talk about **CSS**, or **Cascading Style SHeets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n#### Intro to CSS\n---\n\n**Basic Definition**\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[CHEAT LINK](http://fewdmaterials.github.io/Lecture2FEWD71/selectors_and_specificity.html)**\n\n#### [More Info here](https://canvas.instructure.com/courses/1105667/files/47398831?module_item_id=11295550)","idx":8},"practice":{"content":"# Practice\n---\n\n","idx":9},"__list__":["home","title","desc","warmup","web-developer-tools","indenting-and-validation","relative-vs-absolute-paths","html5-tags","intro-to-css","practice"]}